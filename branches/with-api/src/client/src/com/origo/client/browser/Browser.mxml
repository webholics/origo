<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	width="800" height="600"
	creationComplete="init()">
	
	<mx:Script>
	<![CDATA[
		import mx.controls.TextInput;
		import com.origo.client.TripleStore;
		import com.origo.client.StatusReporter;
		import mx.controls.Alert;
		
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowCurveEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.layout.CircularLayouter;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;

		import org.un.cava.birdeye.ravis.graphLayout.data.INode;
		import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
		import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
		import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
		import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
		import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
		import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
		import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;			
		import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
		
		[Bindable] public var browserGraph:String;
		[Bindable] public var identifier:String;
		[Bindable] public var reporter:StatusReporter;
		[Bindable] public var store:TripleStore;
		[Bindable] public var personInput:TextInput;
		
		[Bindable] private var sparql:Namespace = new Namespace("http://www.w3.org/2005/sparql-results#");
		
		/* 
		 * The following local variables hold various
		 * important object references
		 */

		// graph datastructure object
		private var graph:IGraph;
		// active layouter
		private var layouter:ILayoutAlgorithm;
		// edge renderer
		private var selectedEdgeRenderer:IEdgeRenderer;
		// root node to start with
		private var startRoot:IVisualNode;
		// this is used to display the number of visible items
		private var itemCount:int = 0;
		// important to ensure we are done with the main initialisation
		private var initDone:Boolean = false;
		// the current openend person identifier
		private var person:String;
		
		private function init():void {
			if(personInput.text == "") {
				personInput.text = identifier;
				loadUri(identifier);
			}
		}
		
		/**
		 * Load an person identifier in the browser.
		 * 
		 * @param uri The person identifier
		 */
		public function loadUri(uri:String):void 
		{
			person = uri;
			reporter.status = "Loading data...";
			store.addEventListener("result", loadResult);
			store.executeQuery("LOAD <" + uri + "> INTO <" + browserGraph + ">");
		}
		
		private function loadResult(event:Event):void
		{
			store.removeEventListener("result", loadResult);
			store.addEventListener("result", askResult);
			store.executeQuery(
				"PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +
				"ASK WHERE {" +
				"GRAPH <" + browserGraph + "> {" +
				"<" + person + "> a foaf:Person ." +
				"}}"
			);
		}
		
		private function askResult(event:Event):void
		{
			store.removeEventListener("result", askResult);

			if(store.results[0].sparql::boolean != "true") {
				// maybe the identifier is not the person itself but the foaf document
				// then we could correct it if foaf:primaryTopic is given
				store.addEventListener("result", primaryTopicResult);
				store.executeQuery(
					"PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +
					"SELECT ?person WHERE {" +
					"GRAPH <" + browserGraph + "> {" +
					"<" + person + "> foaf:primaryTopic ?person ." +
					"}}"
				);
			}
			{
				// todo: load see also
				// todo: load graph
			}
		}
		
		private function primaryTopicResult(event:Event):void
		{
			store.removeEventListener("result", primaryTopicResult);
			
			var eventResult:Object = store.results[0];
			if(eventResult.sparql::results.length() > 0 && eventResult.sparql::results.sparql::result.length() > 0) {
				var result:Object = eventResult.sparql::results.sparql::result;
				person = result.sparql::binding.(@name=="person").children()[0];
				
				// now we can continue
				// todo: load see also
				// todo: load graph
			}
			else {
				reporter.status = "The given person URI could not be loaded!"
			}
		}
	]]>
	</mx:Script>
	
	<mx:HBox left="0" bottom="0" top="0" right="0">
		<mx:Panel width="250" height="200" layout="absolute" title="Browser">
		</mx:Panel>
		<mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
			<ravis:VisualGraph id="vgraph" width="100%" height="100%" 
				paddingBottom="5" left="0" right="0" top="0" bottom="0"
				backgroundColor="#FFFFFF" alpha="1"
				itemRenderer="org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer"
				visibilityLimitActive="true">
			</ravis:VisualGraph>
			<mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" />
		</mx:Canvas>
	</mx:HBox>
	
</mx:Canvas>
