<?xml version="1.0" encoding="utf-8"?>

<!--
Origo - social client

@copyright Copyright (c) 2008-2009 Mario Volke
@author    Mario Volke <mario.volke@webholics.de>
-->

<mx:Canvas
	xmlns:sg="com.adobe.flex.extras.controls.springgraph.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:browser="com.origo.browser.*"
	width="100%" height="100%"
	creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.controls.CheckBox;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import mx.events.ValidationResultEvent;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import com.origo.*;
			import mx.core.Application;	
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.binding.utils.ChangeWatcher;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			
			private var store:ProfileStore;	
			private var api:ApiConnector;
			
			[Embed(source="../assets/avatar.png")]
            public var avatarCls:Class;
            
            [Bindable] private var relTypes:ArrayCollection;
			
			/**
			 * A queue where profiles that has to be loaded are stored.
			 */
			private var profileQueue:Array;
			
			/**
			 * The graph
			 */
			[Bindable] private var graph:Graph;
			
			public static function getInstance():Browser
			{
				return Application.application.browser;
			}
			
			private function init():void
			{
				profileQueue = new Array();
				graph = new Graph();
				
				store = ProfileStore.getInstance();
				api = ApiConnector.getInstance();
				
				browserTextInputValidator.addEventListener(ValidationResultEvent.INVALID, function():void {
					browserTextInput.styleName = "error";
				});
				browserTextInputValidator.addEventListener(ValidationResultEvent.VALID, function():void {
					browserTextInput.styleName = "";
				});
				
				addRelBox.visible = false;
				addRelBox.includeInLayout = false;
				removeRelBox.visible = false;
				removeRelBox.includeInLayout = false;
				
				// bind current item
				BindingUtils.bindSetter(refreshProfile, springgraph, "currentItem");
				
				// generate rel checkboxes
				for each(var type:String in RelationshipsHelper.types) {
					var cb:CheckBox = new CheckBox();
					cb.id = type + "Rel";
					cb.label = RelationshipsHelper.labels[type];
					cb.styleName = "browserRelationshipType";
					cb.addEventListener(Event.CHANGE, relCheckBoxChange);
					cb.selected = true;
					
					if(type != "knows")
						cb.setStyle("paddingLeft", 10);
						
					relBox.addChild(cb);
				}
				
				// go to home page
				home();
			}
			
			private function validateBrowserForm():Boolean
			{               
				var valid:Boolean = true;
				var vEvent:ValidationResultEvent;
                
				vEvent = browserTextInputValidator.validate();
				if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID)
					valid = false;

				return valid;
			}
			
			/**
			 * Load and show a Personal URI.
			 * This method resets the whole graph.
			 * 
			 * @param String uri
			 */
			public function browse(uri:String=null):void
			{
				if(uri != null)
					browserTextInput.text = uri;
				
				// first abort other processes
				abort();
				
				loadProfile(browserTextInput.text);
			}
			
			/**
			 * Load a profile of a person
			 */
			private function loadProfile(uri:String):void
			{
				// check if data was already loaded
				var item:BrowserItem = graph.find(uri) as BrowserItem;
				if(item && item.loaded) {
					loadRelationships(uri);
					return;
				}
				
				progressBox.visible = true;
				
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				api.browserProfile(uri);
			}
			
			private function loadProfileSuccess(event:ApiConnectorEvent):void
			{
				progressBox.visible = false;
				
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				var result:XML = event.data as XML;
				var id:String = result.profile[0].@id;
				
				browserTextInput.text = id;
				
				var item:BrowserItem = new BrowserItem(id);
				item.properties = result.profile[0];
				item.loaded = true;
				graph.add(item);
				
				loadRelationships(id);
			}
			
			/**
			 * Load relationships of a person
			 */
			private function loadRelationships(uri:String):void
			{
				progressBox.visible = true;
				
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadRelationshipsSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				api.browserRelationships(uri);
			}
			
			private function loadRelationshipsSuccess(event:ApiConnectorEvent):void
			{
				progressBox.visible = false;
				
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadRelationshipsSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				// clear old profile queue
				profileQueue.length = 0;
				
				var result:XML = event.data as XML;
				
				var from:BrowserItem = graph.find(browserTextInput.text) as BrowserItem;
				if(from) {
					from.relationships = result;
					
					// delete old relationships
					/*for(var id:String in graph.neighbors(from.id)) {
						var oldItem:Item = graph.find(id);
						if(oldItem)
							graph.unlink(from, oldItem);
					}*/
				
					// add relationships
					for each(var rel:Object in result.relationship) {
						var item:BrowserItem = graph.find(rel.profile[0].@id) as BrowserItem;
						if(item == null) {
							item = new BrowserItem(rel.profile[0].@id);
							item.properties = rel.profile[0];
							graph.add(item);
						}
						
						if(!item.loaded)
							profileQueue.push(item);
						
						if(!graph.linked(from, item)) {
							graph.link(from, item);
						}
					}

					//filterRelationships(from);
					springgraph.currentItem = from;
				}
				
				loadProfileQueue();				
			}
			
			/**
			 * Load profiles of profileQueue
			 */
			private function loadProfileQueue():void
			{
				if(profileQueue.length == 0)
					return;
					
				var item:BrowserItem = profileQueue.shift();
				if(!item.loaded) {
					if(item.id == "") {
						item.loaded = true;
					}
					else {
						progressBox.visible = true;
						api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileQueueSuccess);
						api.addEventListener(ApiConnectorEvent.ERROR_EVENT, loadProfileQueueError);
						api.browserProfile(item.id);
					}
				}
				else
					loadProfileQueue();
			}
			
			private function loadProfileQueueSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileQueueSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, loadProfileQueueError);
				
				progressBox.visible = false;
				
				var result:XML = event.data as XML;
				if(result && result.profile && result.profile[0] && result.profile[0].@id) {
					var item:BrowserItem = graph.find(result.profile[0].@id) as BrowserItem;
					if(item) {
						item.properties = result.profile[0];
						item.loaded = true;
					}
				}
				
				// check if other profiles are in queue and need to be loaded
				loadProfileQueue();
			}
			
			/**
			 * This method catches errors while loading the profile queue.
			 * We ignore the api error and simply load the next item.
			 */
			private function loadProfileQueueError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileQueueSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				progressBox.visible = false;
				
				// check if other profiles are in queue and need to be loaded
				loadProfileQueue();
			}
			
			/**
			 * This method is called if an api error occures within the browser.
			 */
			private function apiError(event:ApiConnectorEvent):void
			{
				progressBox.visible = false;
				
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadRelationshipsSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileQueueSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, reloadSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, loadProfileQueueError);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				var alert:Alert = Alert.show(event.message, "An error occured!");
				alert.width = 350;
				alert.height = 150;
			}
			
			/**
			 * Abort current requests
			 */
			private function abort():void
			{
				// we have to remove all listeners,
				// because we don't know what requests are active at the moment
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadRelationshipsSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, loadProfileQueueSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, reloadSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, loadProfileQueueError);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				progressBox.visible = false;
				
				// clear profile queue
				profileQueue.length = 0;
			}
			
			/**
			 * Delete History and go to the profile of the origo user
			 */
			private function home():void
			{
				springgraph.resetHistory();
				
				// the browser homepage is the personal uri of the origo user
				browse(store.id);
			}
			
			/**
			 * Load properties from current item into profile viewer.
			 */
			private function refreshProfile(event:Object):void
			{
				var i:BrowserItem = springgraph.currentItem as BrowserItem;
				
				if(!i) {
					profileName.visible = false;
					profileImage.visible = false;
					
					profileTitleLabel.visible = false;
					profileTitleLabel.includeInLayout = false;
					profileTitle.visible = false;
					profileTitle.includeInLayout = false;
					
					profileGivennameLabel.visible = false;
					profileGivennameLabel.includeInLayout = false;
					profileGivenname.visible = false;
					profileGivenname.includeInLayout = false;
		
					profileLastnameLabel.visible = false;
					profileLastnameLabel.includeInLayout = false;
					profileLastname.visible = false;
					profileLastname.includeInLayout = false;
				
					profileNickLabel.visible = false;
					profileNickLabel.includeInLayout = false;
					profileNick.visible = false;
					profileNick.includeInLayout = false;
				
					profileGenderLabel.visible = false;
					profileGenderLabel.includeInLayout = false;
					profileGender.visible = false;
					profileGender.includeInLayout = false;
			
					profileEmailLabel.visible = false;
					profileEmailLabel.includeInLayout = false;
					profileEmail.visible = false;
					profileEmail.includeInLayout = false;
				
					profilePhoneLabel.visible = false;
					profilePhoneLabel.includeInLayout = false;
					profilePhone.visible = false;
					profilePhone.includeInLayout = false;
				
					profilePlanLabel.visible = false;
					profilePlanLabel.includeInLayout = false;
					profilePlan.visible = false;
					profilePlan.includeInLayout = false;
			
					profileGeekcodeLabel.visible = false;
					profileGeekcodeLabel.includeInLayout = false;
					profileGeekcode.visible = false;
					profileGeekcode.includeInLayout = false;
				
					profileMyersbriggsLabel.visible = false;
					profileMyersbriggsLabel.includeInLayout = false;
					profileMyersbriggs.visible = false;
					profileMyersbriggs.includeInLayout = false;
				
					profileHomepageLabel.visible = false;
					profileHomepageLabel.includeInLayout = false;
					profileHomepage.visible = false;
					profileHomepage.includeInLayout = false;
				
					profileWeblogLabel.visible = false;
					profileWeblogLabel.includeInLayout = false;
					profileWeblog.visible = false;
					profileWeblog.includeInLayout = false;
				
					profileWorkinfohomepageLabel.visible = false;
					profileWorkinfohomepageLabel.includeInLayout = false;
					profileWorkinfohomepage.visible = false;
					profileWorkinfohomepage.includeInLayout = false;
			
					profileWorkplacehomepageLabel.visible = false;
					profileWorkplacehomepageLabel.includeInLayout = false;
					profileWorkplacehomepage.visible = false;
					profileWorkplacehomepage.includeInLayout = false;
				
					profileSchoolhomepageLabel.visible = false;
					profileSchoolhomepageLabel.includeInLayout = false;
					profileSchoolhomepage.visible = false;
					profileSchoolhomepage.includeInLayout = false;
			
					profileOpenidLabel.visible = false;
					profileOpenidLabel.includeInLayout = false;
					profileOpenid.visible = false;
					profileOpenid.includeInLayout = false;
			
					profileIcqLabel.visible = false;
					profileIcqLabel.includeInLayout = false;
					profileIcq.visible = false;
					profileIcq.includeInLayout = false;
				
					profileMsnLabel.visible = false;
					profileMsnLabel.includeInLayout = false;
					profileMsn.visible = false;
					profileMsn.includeInLayout = false;
			
					profileAimLabel.visible = false;
					profileAimLabel.includeInLayout = false;
					profileAim.visible = false;
					profileAim.includeInLayout = false;
				
					profileYahooLabel.visible = false;
					profileYahooLabel.includeInLayout = false;
					profileYahoo.visible = false;
					profileYahoo.includeInLayout = false;
				
					profileJabberLabel.visible = false;
					profileJabberLabel.includeInLayout = false;
					profileJabber.visible = false;
					profileJabber.includeInLayout = false;

					return;
				}
				
				// filter relationships
				filterRelationships(i);
				
				// set add or delete relationship button
				if(i.id != ProfileStore.getInstance().id) {
					var found:Boolean = false;
					for each(var rel2:Object in ProfileStore.getInstance().relationships.relationship) {
						if(rel2.profile[0].@id == i.id) {
							found = true;
							break;
						}
					}
						
					if(found) {
						addRelBox.visible = false;
						addRelBox.includeInLayout = false;
						removeRelBox.visible = true;
						removeRelBox.includeInLayout = true;
					}
					else {
						addRelBox.visible = true;
						addRelBox.includeInLayout = true;
						removeRelBox.visible = false;
						removeRelBox.includeInLayout = false;
					}
				}
				else {
					addRelBox.visible = false;
					addRelBox.includeInLayout = false;
					removeRelBox.visible = false;
					removeRelBox.includeInLayout = false;
				}
				
				// set name
				if(i.properties.property.(@name == "name").length() > 0)
					profileName.text = i.properties.property.(@name == "name")[0];
				else if(i.properties.property.(@name == "givenname").length() > 0)
					profileName.text = i.properties.property.(@name == "givenname")[0];
				else if(i.properties.property.(@name == "nick").length() > 0)
					profileName.text = i.properties.property.(@name == "nick")[0];
				else
					profileName.text = i.id;
				profileName.visible = true;
					
				// set userimage				
				if(i.properties.property.(@name == "img").length() > 0)
					profileImage.source = i.properties.property.(@name == "img")[0];
				else if(i.properties.property.(@name == "depiction").length() > 0)
					profileImage.source = i.properties.property.(@name == "depiction")[0];
				else
					profileImage.source = avatarCls;
				profileImage.visible = true;
					
				// set personal information
				if(i.properties.property.(@name == "title").length() > 0) {
					profileTitleLabel.visible = true;
					profileTitleLabel.includeInLayout = true;
					profileTitle.visible = true;
					profileTitle.includeInLayout = true;
					profileTitle.text = i.properties.property.(@name == "title")[0];
				}
				else {
					profileTitleLabel.visible = false;
					profileTitleLabel.includeInLayout = false;
					profileTitle.visible = false;
					profileTitle.includeInLayout = false;
				}
				if(i.properties.property.(@name == "givenname").length() > 0) {
					profileGivennameLabel.visible = true;
					profileGivennameLabel.includeInLayout = true;
					profileGivenname.visible = true;
					profileGivenname.includeInLayout = true;
					profileGivenname.text = i.properties.property.(@name == "givenname")[0];
				}
				else {
					profileGivennameLabel.visible = false;
					profileGivennameLabel.includeInLayout = false;
					profileGivenname.visible = false;
					profileGivenname.includeInLayout = false;
				}
				if(i.properties.property.(@name == "family_name").length() > 0) {
					profileLastnameLabel.visible = true;
					profileLastnameLabel.includeInLayout = true;
					profileLastname.visible = true;
					profileLastname.includeInLayout = true;
					profileLastname.text = i.properties.property.(@name == "family_name")[0];
				}
				else {
					profileLastnameLabel.visible = false;
					profileLastnameLabel.includeInLayout = false;
					profileLastname.visible = false;
					profileLastname.includeInLayout = false;
				}
				if(i.properties.property.(@name == "nick").length() > 0) {
					profileNickLabel.visible = true;
					profileNickLabel.includeInLayout = true;
					profileNick.visible = true;
					profileNick.includeInLayout = true;
					profileNick.text = i.properties.property.(@name == "nick")[0];
				}
				else {
					profileNickLabel.visible = false;
					profileNickLabel.includeInLayout = false;
					profileNick.visible = false;
					profileNick.includeInLayout = false;
				}
				if(i.properties.property.(@name == "gender").length() > 0) {
					profileGenderLabel.visible = true;
					profileGenderLabel.includeInLayout = true;
					profileGender.visible = true;
					profileGender.includeInLayout = true;
					profileGender.text = i.properties.property.(@name == "gender")[0];
				}
				else {
					profileGenderLabel.visible = false;
					profileGenderLabel.includeInLayout = false;
					profileGender.visible = false;
					profileGender.includeInLayout = false;
				}
				if(i.properties.property.(@name == "email").length() > 0) {
					profileEmailLabel.visible = true;
					profileEmailLabel.includeInLayout = true;
					profileEmail.visible = true;
					profileEmail.includeInLayout = true;
					profileEmail.text = i.properties.property.(@name == "email")[0];
				}
				else {
					profileEmailLabel.visible = false;
					profileEmailLabel.includeInLayout = false;
					profileEmail.visible = false;
					profileEmail.includeInLayout = false;
				}
				if(i.properties.property.(@name == "phone").length() > 0) {
					profilePhoneLabel.visible = true;
					profilePhoneLabel.includeInLayout = true;
					profilePhone.visible = true;
					profilePhone.includeInLayout = true;
					profilePhone.text = i.properties.property.(@name == "phone")[0];
				}
				else {
					profilePhoneLabel.visible = false;
					profilePhoneLabel.includeInLayout = false;
					profilePhone.visible = false;
					profilePhone.includeInLayout = false;
				}
				if(i.properties.property.(@name == "plan").length() > 0) {
					profilePlanLabel.visible = true;
					profilePlanLabel.includeInLayout = true;
					profilePlan.visible = true;
					profilePlan.includeInLayout = true;
					profilePlan.text = i.properties.property.(@name == "plan")[0];
				}
				else {
					profilePlanLabel.visible = false;
					profilePlanLabel.includeInLayout = false;
					profilePlan.visible = false;
					profilePlan.includeInLayout = false;
				}
				if(i.properties.property.(@name == "geekcode").length() > 0) {
					profileGeekcodeLabel.visible = true;
					profileGeekcodeLabel.includeInLayout = true;
					profileGeekcode.visible = true;
					profileGeekcode.includeInLayout = true;
					profileGeekcode.text = i.properties.property.(@name == "geekcode")[0];
				}
				else {
					profileGeekcodeLabel.visible = false;
					profileGeekcodeLabel.includeInLayout = false;
					profileGeekcode.visible = false;
					profileGeekcode.includeInLayout = false;
				}
				if(i.properties.property.(@name == "myersbriggs").length() > 0) {
					profileMyersbriggsLabel.visible = true;
					profileMyersbriggsLabel.includeInLayout = true;
					profileMyersbriggs.visible = true;
					profileMyersbriggs.includeInLayout = true;
					profileMyersbriggs.text = i.properties.property.(@name == "myersbriggs")[0];
				}
				else {
					profileMyersbriggsLabel.visible = false;
					profileMyersbriggsLabel.includeInLayout = false;
					profileMyersbriggs.visible = false;
					profileMyersbriggs.includeInLayout = false;
				}
				
				// set websites
				if(i.properties.property.(@name == "homepage").length() > 0) {
					profileHomepageLabel.visible = true;
					profileHomepageLabel.includeInLayout = true;
					profileHomepage.visible = true;
					profileHomepage.includeInLayout = true;
					profileHomepage.text = i.properties.property.(@name == "homepage")[0];
				}
				else {
					profileHomepageLabel.visible = false;
					profileHomepageLabel.includeInLayout = false;
					profileHomepage.visible = false;
					profileHomepage.includeInLayout = false;
				}
				if(i.properties.property.(@name == "weblog").length() > 0) {
					profileWeblogLabel.visible = true;
					profileWeblogLabel.includeInLayout = true;
					profileWeblog.visible = true;
					profileWeblog.includeInLayout = true;
					profileWeblog.text = i.properties.property.(@name == "weblog")[0];
				}
				else {
					profileWeblogLabel.visible = false;
					profileWeblogLabel.includeInLayout = false;
					profileWeblog.visible = false;
					profileWeblog.includeInLayout = false;
				}
				if(i.properties.property.(@name == "workinfohomepage").length() > 0) {
					profileWorkinfohomepageLabel.visible = true;
					profileWorkinfohomepageLabel.includeInLayout = true;
					profileWorkinfohomepage.visible = true;
					profileWorkinfohomepage.includeInLayout = true;
					profileWorkinfohomepage.text = i.properties.property.(@name == "workinfohomepage")[0];
				}
				else {
					profileWorkinfohomepageLabel.visible = false;
					profileWorkinfohomepageLabel.includeInLayout = false;
					profileWorkinfohomepage.visible = false;
					profileWorkinfohomepage.includeInLayout = false;
				}
				if(i.properties.property.(@name == "workplacehomepage").length() > 0) {
					profileWorkplacehomepageLabel.visible = true;
					profileWorkplacehomepageLabel.includeInLayout = true;
					profileWorkplacehomepage.visible = true;
					profileWorkplacehomepage.includeInLayout = true;
					profileWorkplacehomepage.text = i.properties.property.(@name == "workplacehomepage")[0];
				}
				else {
					profileWorkplacehomepageLabel.visible = false;
					profileWorkplacehomepageLabel.includeInLayout = false;
					profileWorkplacehomepage.visible = false;
					profileWorkplacehomepage.includeInLayout = false;
				}
				if(i.properties.property.(@name == "schoolhomepage").length() > 0) {
					profileSchoolhomepageLabel.visible = true;
					profileSchoolhomepageLabel.includeInLayout = true;
					profileSchoolhomepage.visible = true;
					profileSchoolhomepage.includeInLayout = true;
					profileSchoolhomepage.text = i.properties.property.(@name == "schoolhomepage")[0];
				}
				else {
					profileSchoolhomepageLabel.visible = false;
					profileSchoolhomepageLabel.includeInLayout = false;
					profileSchoolhomepage.visible = false;
					profileSchoolhomepage.includeInLayout = false;
				}
				
				// set accounts
				if(i.properties.property.(@name == "openid").length() > 0) {
					profileOpenidLabel.visible = true;
					profileOpenidLabel.includeInLayout = true;
					profileOpenid.visible = true;
					profileOpenid.includeInLayout = true;
					profileOpenid.text = i.properties.property.(@name == "openid")[0];
				}
				else {
					profileOpenidLabel.visible = false;
					profileOpenidLabel.includeInLayout = false;
					profileOpenid.visible = false;
					profileOpenid.includeInLayout = false;
				}
				if(i.properties.property.(@name == "icq").length() > 0) {
					profileIcqLabel.visible = true;
					profileIcqLabel.includeInLayout = true;
					profileIcq.visible = true;
					profileIcq.includeInLayout = true;
					profileIcq.text = i.properties.property.(@name == "icq")[0];
				}
				else {
					profileIcqLabel.visible = false;
					profileIcqLabel.includeInLayout = false;
					profileIcq.visible = false;
					profileIcq.includeInLayout = false;
				}
				if(i.properties.property.(@name == "msn").length() > 0) {
					profileMsnLabel.visible = true;
					profileMsnLabel.includeInLayout = true;
					profileMsn.visible = true;
					profileMsn.includeInLayout = true;
					profileMsn.text = i.properties.property.(@name == "msn")[0];
				}
				else {
					profileMsnLabel.visible = false;
					profileMsnLabel.includeInLayout = false;
					profileMsn.visible = false;
					profileMsn.includeInLayout = false;
				}
				if(i.properties.property.(@name == "aim").length() > 0) {
					profileAimLabel.visible = true;
					profileAimLabel.includeInLayout = true;
					profileAim.visible = true;
					profileAim.includeInLayout = true;
					profileAim.text = i.properties.property.(@name == "aim")[0];
				}
				else {
					profileAimLabel.visible = false;
					profileAimLabel.includeInLayout = false;
					profileAim.visible = false;
					profileAim.includeInLayout = false;
				}
				if(i.properties.property.(@name == "yahoo").length() > 0) {
					profileYahooLabel.visible = true;
					profileYahooLabel.includeInLayout = true;
					profileYahoo.visible = true;
					profileYahoo.includeInLayout = true;
					profileYahoo.text = i.properties.property.(@name == "yahoo")[0];
				}
				else {
					profileYahooLabel.visible = false;
					profileYahooLabel.includeInLayout = false;
					profileYahoo.visible = false;
					profileYahoo.includeInLayout = false;
				}
				if(i.properties.property.(@name == "jabber").length() > 0) {
					profileJabberLabel.visible = true;
					profileJabberLabel.includeInLayout = true;
					profileJabber.visible = true;
					profileJabber.includeInLayout = true;
					profileJabber.text = i.properties.property.(@name == "jabber")[0];
				}
				else {
					profileJabberLabel.visible = false;
					profileJabberLabel.includeInLayout = false;
					profileJabber.visible = false;
					profileJabber.includeInLayout = false;
				}
			}
			
			private function gotoUrl(url:String):void
			{
				var urlRequest:URLRequest = new URLRequest(url); 
				navigateToURL(urlRequest, "_blank");
			}
			
			private function reload():void
			{
				if(springgraph.currentItem) {
					progressBox.visible = true;
					
					api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, reloadSuccess);
					api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
					api.browserClean(springgraph.currentItem.id);
				}
			}
			
			private function reloadSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, reloadSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiError);
				
				progressBox.visible = false;
				
				if(springgraph.currentItem) {
					springgraph.resetHistory();
					var id:String = springgraph.currentItem.id;
					graph.remove(springgraph.currentItem);
					springgraph.currentItem = null;
					browse(id);
				}
			}
			
			private function showDisabledInfo():void
			{
				var alert:Alert = Alert.show("You cannot change the personal profile URL.", "Can't change value");
				alert.width = 300;
				alert.height = 120;
			}
			
			private function gotoAddForm():void
			{
				if(springgraph.currentItem) {
					var id:String = springgraph.currentItem.id;
					
					currentState = "add";
					
					addFormErrorText.visible = false;
					addFormErrorText.includeInLayout = false;
					
					addTo.text = id;
					
					relTypes = new ArrayCollection();
					for each(var key:String in RelationshipsHelper.types)
						if(key == "knows")
							relTypes.addItem({
								key:		key,
								label:		RelationshipsHelper.labels[key],
								selected:	true
							});
						else
							relTypes.addItem({
								key:		key,
								label:		RelationshipsHelper.labels[key],
								selected:	false
							});
				}
			}
			
			private function addRelationship():void
			{
				// trim all inputs
				addTo.text = InputHelper.trim(addTo.text);
					
				currentState = "addsave";
				
				var types:Array = new Array();
				for each(var type:Object in relTypes)
					if(type.selected)
						types.push(type.key);

				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiAddError);
				api.editorRelationshipsUpdate(addTo.text, types);
			}
			
			private function addSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiAddError);
				
				// save relationships into profile store
				var result:XML = event.data as XML;
				ProfileStore.getInstance().relationships = result;
				
				// clean old profile data
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, addCleanSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiAddError);
				api.browserClean(ProfileStore.getInstance().id);
			}
			
			private function addCleanSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addCleanSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiAddError);
				
				currentState = "";
				
				var item:Item = graph.find(ProfileStore.getInstance().id);
				if(item != null)
					graph.remove(item);
					
				reload();
			}
			
			private function apiAddError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addCleanSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiAddError);
				
				currentState = "add";
				addFormErrorText.text = event.message;
				addFormErrorText.visible = true;
				addFormErrorText.includeInLayout = true;
			}
			
			private function deleteRelationship():void
			{
				if(springgraph.currentItem) {
					var alertDelete:Alert = Alert.show(
						"Are you sure you want to delete the selected relationship?", 
						"Delete relationship", 
						Alert.OK | Alert.CANCEL, 
						null, 
						alertDeleteListener, 
						null, 
						Alert.OK);
					alertDelete.width = 400;
					alertDelete.height = 120;
				}
			}
			
			private function alertDeleteListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if(eventObj.detail == Alert.OK) {
					if(springgraph.currentItem) {
						var id:String = springgraph.currentItem.id;
						currentState = "delete";
					
						api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
						api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
						api.editorRelationshipsDelete(id);
					}
				}
			}
			
			private function deleteSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiDeleteError);
				
				// save relationships into profile store
				var result:XML = event.data as XML;
				ProfileStore.getInstance().relationships = result;
				
				// clean old profile data
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteCleanSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
				api.browserClean(ProfileStore.getInstance().id);
			}
			
			private function deleteCleanSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteCleanSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
				
				currentState = "";
				
				var item:Item = graph.find(ProfileStore.getInstance().id);
				if(item != null)
					graph.remove(item);
					
				reload();
			}
			
			private function apiDeleteError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteCleanSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiDeleteError);
				
				currentState = "";
			}
			
			private function relCheckBoxChange(event:Event):void
			{
				var cb:CheckBox = event.currentTarget as CheckBox;
				if(cb.id == "knowsRel") {
					var child:Object;
					if(cb.selected) {
						// knows is the base relationship of all relationships
						// therefore we then select all checkboxes
						for each(child in relBox.getChildren()) {
							if(child as CheckBox) {
								(child as CheckBox).selected = true;
							}
						}
					}
					else {
						// for usability reasons we deselect everything here
						for each(child in relBox.getChildren()) {
							if(child as CheckBox) {
								(child as CheckBox).selected = false;
							}
						}
					}
				}
				else {
					// if we deselect a relationship type
					// then knows can't be selected anymore
					if(!cb.selected) {
						var cbKnows:CheckBox = relBox.getChildAt(0) as CheckBox;
						if(cbKnows) {
							cbKnows.selected = false;
						}
					}
				}
				
				if(springgraph.currentItem)
					filterRelationships(springgraph.currentItem as BrowserItem);
			}
			
			private function filterRelationships(item:BrowserItem):void {
				// filter relationship types
				var types:Array = new Array();
				for each(var cb:CheckBox in relBox.getChildren()) {
					if(cb)
						types[cb.id.substr(0, cb.id.length-3)] = cb.selected;
				}

				springgraph.resetShowHide();
				
				var neighbors:Object = graph.neighbors(item.id);
				for(var neighborId:String in neighbors) {
					if(graph.hasNode(neighborId)) {
						var nitem:BrowserItem = graph.find(neighborId) as BrowserItem;
						
						if(!springgraph.hasBeenCurrentItem(nitem)) {
							if(item.relationships && item.relationships.relationship.profile.(hasOwnProperty('@id') && @id == nitem.id).length() > 0) {
								var node:XML = item.relationships.relationship.profile.(hasOwnProperty('@id') && @id == nitem.id)[0];
								var nodeTypes:Array = node.parent().@type.split(",");
								
								var itemVisible:Boolean = false;
								for each(var nodeType:String in nodeTypes) {
									if(types[nodeType]) {
										itemVisible = true;
										break;
									}
								}
							
								if(!itemVisible)
									springgraph.hideItem(nitem);
							}
							else
								springgraph.hideItem(nitem);
						}
					}
				}
				
				if(springgraph.itemLimit == 50)
					springgraph.itemLimit--;
				else	
					springgraph.itemLimit++;
			}
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="add">
			<mx:AddChild>
				<mx:Form id="addForm" 
					horizontalCenter="0" verticalCenter="0"
					defaultButton="{addSubmitButton}">	
					<mx:FormHeading id="addFormHeading" label="Add relationship"/>
					<mx:Text id="addFormErrorText" styleName="errorText" visible="false" includeInLayout="false"/>
					<mx:FormItem label="Personal URI" required="true">
						<mx:TextInput id="addTo" width="250" editable="false" styleName="disabled" click="showDisabledInfo()" focusEnabled="false"/>
					</mx:FormItem>
					<mx:FormItem label="Relationship types (me -> url)">
						<mx:List id="addRelationshipsInput" 
							width="250" height="250" 
							dataProvider="{relTypes}" 
							itemRenderer="com.origo.editor.RelationshipTypesItemRenderer" 
							selectable="false"/>
					</mx:FormItem> 
					<mx:Spacer height="10" width="100%"/>
					<mx:HRule width="100%"/>
					<mx:HBox horizontalGap="10" horizontalAlign="right" width="100%">
						<mx:Button label="Cancel" id="addCancelButton" width="100" click="currentState=''"/>	
						<mx:Button label="Save" id="addSubmitButton" width="100" click="addRelationship()"/>
					</mx:HBox>
				</mx:Form>	
			</mx:AddChild>
			<mx:RemoveChild target="{springgraph}"/>
			<mx:RemoveChild target="{mainDivBox}"/>
			<mx:RemoveChild target="{progressBox}"/>
		</mx:State>
		<mx:State name="addsave">
			<mx:AddChild>
				<mx:Box id="addProgressBar"
					paddingBottom="10" paddingTop="10" 
					paddingLeft="10" paddingRight="10"
					horizontalCenter="0" verticalCenter="0"
					styleName="box">
					<mx:ProgressBar 
						label="Adding relationship..." 
						width="300"
						indeterminate="true"/>
				</mx:Box>
			</mx:AddChild>
			<mx:RemoveChild target="{springgraph}"/>
			<mx:RemoveChild target="{mainDivBox}"/>
			<mx:RemoveChild target="{progressBox}"/>
		</mx:State>
		<mx:State name="delete">
			<mx:AddChild>
				<mx:Box id="deleteProgressBar"
					paddingBottom="10" paddingTop="10" 
					paddingLeft="10" paddingRight="10"
					horizontalCenter="0" verticalCenter="0"
					styleName="box">
					<mx:ProgressBar 
						label="Deleting relationship..." 
						width="300"
						indeterminate="true"/>
				</mx:Box>
			</mx:AddChild>
			<mx:RemoveChild target="{springgraph}"/>
			<mx:RemoveChild target="{mainDivBox}"/>
			<mx:RemoveChild target="{progressBox}"/>
		</mx:State>
	</mx:states>
	
	<mx:StringValidator id="browserTextInputValidator" source="{browserTextInput}" property="text" required="true"/>
	
	<sg:Roamer id="springgraph" 
		bottom="0" top="0" right="0" left="0"
		dataProvider="{graph}"
		itemRenderer="com.origo.browser.BrowserItemRenderer"
		lineColor="#202020"
		maxDistanceFromCurrent="2"
		itemLimit="50"
		autoFit="false"
		repulsionFactor="{rep.value}"
		showHistory="true"
		tidyHistory="true">
		<sg:addItemEffect>
			<mx:Fade duration="500"/>
		</sg:addItemEffect>
	</sg:Roamer>
	
	<mx:HDividedBox id="mainDivBox" horizontalGap="10" bottom="0" top="0" right="0" left="0">
		
		<mx:VBox width="100%" height="100%" verticalGap="10" minWidth="760">
			<mx:HBox 
				width="100%" 
				paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" 
				styleName="lightBox" 
				defaultButton="{goButton}">
				<mx:Button id="backButton" 
					label="&lt;" 
					width="50" 
					click="springgraph.back()"
					enabled="{springgraph.backOK}"/>
				<mx:Button id="forwardButton" 
					label="&gt;" 
					width="50" 
					click="springgraph.forward()"
					enabled="{springgraph.forwardOK}"/>
				<mx:Spacer width="10"/>
				<mx:Button id="reloadButton" label="reload" width="80" click="reload()" enabled="{springgraph.currentItem != null}"/>
				<mx:Button id="abortButton" label="abort" width="80" click="abort()"/>
				<mx:Button id="homeButton" label="home" width="80" click="home()"/>
				<mx:Spacer width="10"/>
				<mx:TextInput id="browserTextInput" text="" width="270"/>
				<mx:Button id="goButton" label="Go" width="50" click="if(validateBrowserForm()) browse(browserTextInput.text)"/>						
			</mx:HBox>
			
			<mx:VBox width="200" styleName="lightBox" 
				verticalGap="2"
				paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
				<mx:HSlider id="rep" 
					value="0.35" 
					minimum="0.05" maximum="1.0" 
					liveDragging="true" 
					change="springgraph.refresh();" 
					width="100%"/>
				<mx:Label text="item spacing" width="100%" textAlign="center" styleName="smallLightText"/>
			</mx:VBox>
			<mx:VBox id="relBox" width="200" height="100%" minHeight="0"
				styleName="lightBox"
				verticalGap="2"
				paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			</mx:VBox>
		</mx:VBox>
		
		<mx:VBox width="200" height="100%" verticalGap="5" minWidth="180">
			<mx:VBox id="profile" width="100%" height="100%" styleName="lightBox" verticalGap="5" paddingTop="5">
				<mx:Canvas width="100%" height="100">
					<mx:Image id="profileImage" 
						maxWidth="100" maxHeight="100" 
						scaleContent="true" 
						maintainAspectRatio="true" 
						horizontalAlign="center" verticalAlign="middle"
						horizontalCenter="0" verticalCenter="0">
						<mx:filters>
							<mx:DropShadowFilter alpha="0.3" angle="45" distance="3" blurX="5" blurY="5"/>
						</mx:filters>
					</mx:Image>
				</mx:Canvas>
				<mx:Label id="profileName" width="100%" minWidth="0" textAlign="center" styleName="normalText"/>
				<mx:Accordion width="100%" height="100%" minHeight="0"
					creationPolicy="all" 
					paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
					<mx:VBox label="Personal Information" verticalGap="2" width="100%" paddingBottom="5" paddingTop="5">
						<mx:Label id="profileTitleLabel" text="Title" styleName="profile" width="100%"/>
						<mx:Text id="profileTitle" styleName="normalText" width="100%"/>
						<mx:Label id="profileGivennameLabel" text="Firstname" styleName="profile" width="100%"/>
						<mx:Text id="profileGivenname" styleName="normalText" width="100%"/>
						<mx:Label id="profileLastnameLabel" text="Lastname" styleName="profile" width="100%"/>
						<mx:Text id="profileLastname" styleName="normalText" width="100%"/>
						<mx:Label id="profileNickLabel" text="Nickname" styleName="profile" width="100%"/>
						<mx:Text id="profileNick" styleName="normalText" width="100%"/>
						<mx:Label id="profileGenderLabel" text="Gender" styleName="profile" width="100%"/>
						<mx:Text id="profileGender" styleName="normalText" width="100%"/>
						<mx:Label id="profileEmailLabel" text="Email-Address" styleName="profile" width="100%"/>
						<mx:Text id="profileEmail" styleName="normalText" width="100%"/>
						<mx:Label id="profilePhoneLabel" text="Phone" styleName="profile" width="100%"/>
						<mx:Text id="profilePhone" styleName="normalText" width="100%"/>
						<mx:Label id="profilePlanLabel" text="Plan file" styleName="profile" width="100%"/>
						<mx:Text id="profilePlan" click="gotoUrl(profilePlan.text)" useHandCursor="true" width="100%"/>
						<mx:Label id="profileGeekcodeLabel" text="Geek Code" styleName="profile" width="100%"/>
						<mx:Text id="profileGeekcode" styleName="normalText" width="100%"/>
						<mx:Label id="profileMyersbriggsLabel" text="Myers Briggs classification" styleName="profile" width="100%"/>
						<mx:Text id="profileMyersbriggs" styleName="normalText" width="100%"/>
					</mx:VBox>
					<mx:VBox label="Websites" verticalGap="2" width="100%" paddingBottom="5" paddingTop="5">
						<mx:Label id="profileHomepageLabel" text="Homepage" styleName="profile" width="100%"/>
						<mx:Text id="profileHomepage" click="gotoUrl(profileHomepage.text)" useHandCursor="true" styleName="normalText" width="100%"/>
						<mx:Label id="profileWeblogLabel" text="Weblog" styleName="profile" width="100%"/>
						<mx:Text id="profileWeblog" click="gotoUrl(profileWeblog.text)" useHandCursor="true" styleName="normalText" width="100%"/>
						<mx:Label id="profileWorkinfohomepageLabel" text="Work Info Homepage" styleName="profile" width="100%"/>
						<mx:Text id="profileWorkinfohomepage" click="gotoUrl(profileWorkinfohomepage.text)" useHandCursor="true" styleName="normalText" width="100%"/>
						<mx:Label id="profileWorkplacehomepageLabel" text="Workplace Homepage" styleName="profile" width="100%"/>
						<mx:Text id="profileWorkplacehomepage" click="gotoUrl(profileWorkplacehomepage.text)" useHandCursor="true" styleName="normalText" width="100%"/>
						<mx:Label id="profileSchoolhomepageLabel" text="School Homepage" styleName="profile" width="100%"/>
						<mx:Text id="profileSchoolhomepage" click="gotoUrl(profileSchoolhomepage.text)" useHandCursor="true" styleName="normalText" width="100%"/>
					</mx:VBox>
					<mx:VBox label="Accounts" verticalGap="2" width="100%" paddingBottom="5" paddingTop="5">
						<mx:Label id="profileOpenidLabel" text="OpenID" styleName="profile" width="100%"/>
						<mx:Text id="profileOpenid" styleName="normalText" width="100%"/>
						<mx:Label id="profileIcqLabel" text="ICQ" styleName="profile" width="100%"/>
						<mx:Text id="profileIcq" styleName="normalText" width="100%"/>
						<mx:Label id="profileMsnLabel" text="MSN" styleName="profile" width="100%"/>
						<mx:Text id="profileMsn" styleName="normalText" width="100%"/>
						<mx:Label id="profileAimLabel" text="AIM" styleName="profile" width="100%"/>
						<mx:Text id="profileAim" styleName="normalText" width="100%"/>
						<mx:Label id="profileYahooLabel" text="Yahoo" styleName="profile" width="100%"/>
						<mx:Text id="profileYahoo" styleName="normalText" width="100%"/>
						<mx:Label id="profileJabberLabel" text="Jabber/XMPP" styleName="profile" width="100%"/>
						<mx:Text id="profileJabber" styleName="normalText" width="100%"/>
					</mx:VBox>
				</mx:Accordion>
			</mx:VBox>
			
			<mx:Box id="addRelBox" styleName="lightBox" width="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
				<mx:Button id="addRelButton" styleName="normalButton" width="100%" textAlign="center" label="Add relationship" click="gotoAddForm()"/>
			</mx:Box>
			
			<mx:Box id="removeRelBox" styleName="lightBox" width="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
				<mx:Button id="removeRelButton" styleName="normalButton" width="100%" textAlign="center" label="Delete relationship" click="deleteRelationship()"/>
			</mx:Box>
		</mx:VBox>
		
	</mx:HDividedBox>
	
	<mx:Box id="progressBox"
		styleName="lightBox"
		horizontalCenter="0"
		bottom="0"
		paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
		visible="false">
		<mx:showEffect>
			<mx:Fade duration="500"/>
		</mx:showEffect>
		<mx:hideEffect>
			<mx:Fade duration="500"/>
		</mx:hideEffect>
		<mx:ProgressBar id="progressBar"
			indeterminate="true"
			label="" labelPlacement="right" labelWidth="0" horizontalGap="0"/>
	</mx:Box>
	
</mx:Canvas>
