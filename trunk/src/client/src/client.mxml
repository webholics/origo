<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	creationComplete="init()" 
	backgroundGradientAlphas="[1.0, 1.0]" 
	backgroundGradientColors="[#4D4D4D, #4D4D4D]" 
	xmlns:editor="com.origo.client.editor.*"
	xmlns:browser="com.origo.client.browser.*">
	<mx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
	
		[Bindable] private var apiKey:String;
		[Bindable] private var apiUrl:String;
		[Bindable] private var sparql:Namespace = new Namespace("http://www.w3.org/2005/sparql-results#");
		[Bindable] private var triples:ArrayCollection = new ArrayCollection();
	
		private function init():void 
		{
			apiKey = Application.application.parameters["api_key"];
			apiUrl = "api/";
			
			loadTriples();
		}
		
		private function loadTriples():void
		{
			api.addEventListener(ResultEvent.RESULT, apiLoadResult);
			
			api.send({
				query: "SELECT ?s ?p ?o WHERE { ?s ?p ?o . }",
				key: apiKey
			});
		}
		
		private function formatBinding(binding:XML):String
		{
			switch(binding.name().localName) {
				case "bnode":
					return "<_:" + binding.toString() + ">";
				case "uri":
					return "<" + binding.toString() + ">";
				case "literal":
					return "\"" + binding.toString() + "\"";
			}
			
			return "";
		}
	
		private function apiFault(event:FaultEvent):void
		{
			api.removeEventListener(ResultEvent.RESULT, apiDeleteResult);
			//api.removeEventListener(ResultEvent.RESULT, apiInsertResult);
			api.removeEventListener(ResultEvent.RESULT, apiLoadResult);

			Alert.show("An error occured while communicating with the sparql endpoint.", "Error");
		}
		
		private function apiLoadResult(event:ResultEvent):void
		{
			api.removeEventListener(ResultEvent.RESULT, apiLoadResult);
			
			triples.removeAll();
			
			for each(var triple:Object in event.result.sparql::results.sparql::result) {
				triples.addItem({
					s: formatBinding(triple.sparql::binding.(@name=="s").children()[0]),
					p: formatBinding(triple.sparql::binding.(@name=="p").children()[0]),
					o: formatBinding(triple.sparql::binding.(@name=="o").children()[0])
				});
			}
		}

		private function displayRow(row:Object, column:DataGridColumn):String
		{
			switch(column.headerText) {
				case "s":
					return formatBinding(row.sparql::binding.(@name=="s").children()[0]);
				case "p":
					return formatBinding(row.sparql::binding.(@name=="p").children()[0]);
				case "o":
					return formatBinding(row.sparql::binding.(@name=="o").children()[0]);
			}

			return "";
		}
		
		private function deleteSelectedTriples():void
		{
			if(triplesGrid.selectedIndices.length > 0) {
				var qu:String = "DELETE {";
			
				for each(var i:int in triplesGrid.selectedIndices) {
					qu += triples[i]["s"] + " " + triples[i]["p"] + " " + triples[i]["o"] + ".";
				}
			
				qu += "}";

				api.addEventListener(ResultEvent.RESULT, apiDeleteResult);

				api.send({
					query: qu,
					key: apiKey
				});
			}
			else
				Alert.show("No triples selected.");
		}
		
		private function apiDeleteResult(event:ResultEvent):void
		{
			api.removeEventListener(ResultEvent.RESULT, apiDeleteResult);
			
			loadTriples();
		}
		
		private function formatNode(type:String, node:String):String
		{
			switch(type) {
				case "bnode":
					return "<_:" + node + ">";
				case "uri":
					return "<" + node + ">";
				case "literal":
					return "\"" + node + "\"";
			}
			
			return "";
		}
		
		private function insertTriple():void 
		{
			
			var qu:String = "INSERT INTO <urn:origo:identity> {";
			
			qu += formatNode(sComboBox.selectedLabel, sTextInput.text) + " ";
			qu += formatNode(pComboBox.selectedLabel, pTextInput.text) + " ";
			qu += formatNode(oComboBox.selectedLabel, oTextInput.text) + ".";
			
			qu += "}";

			api.addEventListener(ResultEvent.RESULT, apiInsertResult);

			api.send({
				query: qu,
				key: apiKey
			});
		}
		
		private function apiInsertResult(event:ResultEvent):void
		{
			api.removeEventListener(ResultEvent.RESULT, apiInsertResult);
			
			loadTriples();
		}
	]]>
	</mx:Script>
	
	<mx:HTTPService id="api" url="{apiUrl}" useProxy="false" method="POST" resultFormat="e4x" fault="apiFault(event);" showBusyCursor="true" />
	
	<mx:StringValidator source="{sTextInput}" property="text" required="true"/>
	<mx:StringValidator source="{pTextInput}" property="text" required="true"/>
	<mx:StringValidator source="{oTextInput}" property="text" required="true"/>
	
	<mx:ApplicationControlBar y="106" right="10" left="10">
		<mx:ToggleButtonBar dataProvider="mainViewStack">
		</mx:ToggleButtonBar>
	</mx:ApplicationControlBar>
	<mx:ViewStack id="mainViewStack" right="10" left="10" top="147" bottom="36">
	
		<mx:Canvas label="Dashboard" width="100%" height="100%">
			<mx:DataGrid id="triplesGrid" height="339" dataProvider="{triples}" right="0" left="0" top="0" editable="false" allowMultipleSelection="true">
				<mx:columns>
					<mx:DataGridColumn headerText="s" dataField="s"/>
					<mx:DataGridColumn headerText="p" dataField="p"/>
					<mx:DataGridColumn headerText="o" dataField="o"/>			
				</mx:columns>
			</mx:DataGrid>
			<mx:Label y="347" text="{triples.length} Triples found" width="302" textAlign="right" right="0"/>
			<mx:Button y="347" label="-" cornerRadius="0" fillAlphas="[1.0, 1.0]" fillColors="[#353535, #151515]" color="#FFFFFF" fontSize="12" alpha="1.0" borderColor="#000000" textRollOverColor="#009dff" textSelectedColor="#009dff" themeColor="#009dff" click="deleteSelectedTriples();" left="304" width="40"/>
			<mx:Button y="347" label="+" cornerRadius="0" fillAlphas="[1.0, 1.0]" fillColors="[#353535, #151515]" color="#FFFFFF" fontSize="12" alpha="1.0" borderColor="#000000" themeColor="#009DFF" textSelectedColor="#009dff" textRollOverColor="#009dff" click="insertTriple();" left="256" width="40"/>
			<mx:Form y="348" height="275" left="0" width="248">
				<mx:FormHeading label="Insert new triple"/>
				<mx:FormItem label="s type">
					<mx:ComboBox id="sComboBox">
						<mx:ArrayCollection>
							<mx:String>uri</mx:String>
							<mx:String>literal</mx:String>
							<mx:String>bnode</mx:String>
						</mx:ArrayCollection>
					</mx:ComboBox>
				</mx:FormItem>
				<mx:FormItem label="s" required="true">
					<mx:TextInput id="sTextInput"/>
				</mx:FormItem>
				<mx:FormItem label="p type">
					<mx:ComboBox id="pComboBox">
						<mx:ArrayCollection>
							<mx:String>uri</mx:String>
							<mx:String>literal</mx:String>
							<mx:String>bnode</mx:String>
						</mx:ArrayCollection></mx:ComboBox>
				</mx:FormItem>
				<mx:FormItem label="p" required="true">
					<mx:TextInput id="pTextInput"/>
				</mx:FormItem>
				<mx:FormItem label="o type">
					<mx:ComboBox id="oComboBox">
						<mx:ArrayCollection>
							<mx:String>uri</mx:String>
							<mx:String>literal</mx:String>
							<mx:String>bnode</mx:String>
						</mx:ArrayCollection></mx:ComboBox>
				</mx:FormItem>
				<mx:FormItem label="o" required="true">
					<mx:TextInput id="oTextInput"/>
				</mx:FormItem>
			</mx:Form>
		</mx:Canvas>
		
		<editor:Editor label="Editor" width="100%" height="100%" apiKey="{apiKey}" apiUrl="{apiUrl}" />
		
		<browser:Browser label="Browser" width="100%" height="100%" />
	</mx:ViewStack>
	<mx:Label text="Â© Copyright 2008 Mario Volke. All right reserved." color="#737373" bottom="10" left="10"/>
	<mx:Image width="200" height="88" scaleContent="false" left="10" top="10" source="../assets/logo.png">
	</mx:Image>
</mx:Application>
