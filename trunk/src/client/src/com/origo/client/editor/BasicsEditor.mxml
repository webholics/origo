<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" width="800" height="600"
	creationComplete="doInit = true; init();" show="init()" hide="doInit = true;">

	<mx:Script>
	<![CDATA[
		import com.origo.client.TripleStore;
		import com.origo.client.StatusReporter;
		import com.origo.client.InputHelper;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.events.ValidationResultEvent;
		
		import com.hurlant.util.Hex;
		import com.hurlant.crypto.hash.SHA1;
		import com.hurlant.crypto.Crypto;
		import com.hurlant.crypto.hash.IHash;
		
		public var identifier:String;
		public var identityGraph:String;
		public var reporter:StatusReporter;
		public var store:TripleStore;
		
		private var doInit:Boolean;
		
		[Bindable] private var sparql:Namespace = new Namespace("http://www.w3.org/2005/sparql-results#");
		
		public function init():void
		{
			if(doInit) {
				store.addEventListener("result", apiLoadResult);

				reporter.status = "Loading data...";
				store.executeQuery(
					"PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +

					"SELECT ?title ?nick ?homepage ?mbox ?mbox_sha1sum ?img ?family_name ?givenname WHERE {" +
						"GRAPH <" + identityGraph + "> {" +
							"<" + identifier + "> rdf:type <http://xmlns.com/foaf/0.1/Person> . " +
							"OPTIONAL { <" + identifier + "> foaf:title ?title }" +
							"OPTIONAL { <" + identifier + "> foaf:nick ?nick }" +
							"OPTIONAL { <" + identifier + "> foaf:homepage ?homepage }" +
							"OPTIONAL { <" + identifier + "> foaf:mbox ?mbox }" +
							"OPTIONAL { <" + identifier + "> foaf:mbox_sha1sum ?mbox_sha1sum }" +
							"OPTIONAL { <" + identifier + "> foaf:img ?img }" +
							"OPTIONAL { <" + identifier + "> foaf:family_name ?family_name }" +
							"OPTIONAL { <" + identifier + "> foaf:givenname ?givenname }" +
						"}" +
					"}"
				);
			}
		}
		
		private function save():void
		{
			store.addEventListener("result", apiSaveResult);
			
			reporter.status = "Saving data...";
			
			// delete query
			
			var query:String = 
				"PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +

				"DELETE FROM <" + identityGraph + "> {" +
					"<" + identifier + "> foaf:title ?title ." +
					"<" + identifier + "> foaf:nick ?nick ." +
					"<" + identifier + "> foaf:homepage ?homepage ." +
					"<" + identifier + "> foaf:mbox ?mbox .";
			
			if(emailEncInput.text != "[encrypted email in database]") {
				query += "<" + identifier + "> foaf:mbox_sha1sum ?mbox_sha1sum .";
			}
				
			query +=
					"<" + identifier + "> foaf:img ?img ." +
					"<" + identifier + "> foaf:family_name ?family_name ." +
					"<" + identifier + "> foaf:givenname ?givenname ." +
					"<" + identifier + "> foaf:name ?name ." +
				"}";

			store.enqueueQuery(query);
			
			// insert query
			
			query = 
				"PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +

				"INSERT INTO <" + identityGraph + "> {";
				
			// trim all inputs
			titleInput.text = InputHelper.trim(titleInput.text);
			nicknameInput.text = InputHelper.trim(nicknameInput.text);
			homepageInput.text = InputHelper.trim(homepageInput.text);
			emailInput.text = InputHelper.trim(emailInput.text);
			emailEncInput.text = InputHelper.trim(emailEncInput.text);
			imageInput.text = InputHelper.trim(imageInput.text);
			familyNameInput.text = InputHelper.trim(familyNameInput.text);
			givenNameInput.text = InputHelper.trim(givenNameInput.text);

			if(titleInput.text != "") {
				query += "<" + identifier + "> foaf:title \"" + titleInput.text + "\" .";
			}
			if(nicknameInput.text != "") {
				query += "<" + identifier + "> foaf:nick \"" + nicknameInput.text + "\" .";
			}
			if(homepageInput.text != "") {
				query += "<" + identifier + "> foaf:homepage <" + homepageInput.text + "> .";
			}
			if(emailInput.text != "") {
				query += "<" + identifier + "> foaf:mbox <" + InputHelper.EmailToUri(emailInput.text) + "> .";
			}
			if(emailEncInput.text != "[encrypted email in database]" && emailEncInput.text != "") {
				var data:ByteArray = Hex.toArray(Hex.fromString(InputHelper.EmailToUri(emailEncInput.text)));
				var hash:IHash = Crypto.getHash("sha1");
				var result:ByteArray = hash.hash(data);
				query += "<" + identifier + "> foaf:mbox_sha1sum \"" + Hex.fromArray(result) + "\" .";
			}
			if(imageInput.text != "") {
				query += "<" + identifier + "> foaf:img <" + imageInput.text + "> .";
			}
			if(familyNameInput.text != "") {
				query += "<" + identifier + "> foaf:family_name \"" + familyNameInput.text + "\" .";
			}
			if(givenNameInput.text != "") {
				query += "<" + identifier + "> foaf:givenname \"" + givenNameInput.text + "\" .";
			}
			if(familyNameInput.text != "" && givenNameInput.text != "") {
				query += "<" + identifier + "> foaf:name \"" + givenNameInput.text + " " + familyNameInput.text + "\" .";
			}

			query += "}";
			
			store.enqueueQuery(query);
			store.executeQueries(identityGraph);
		}
		
		private function apiLoadResult(event:Event):void
		{
			store.removeEventListener("result", apiLoadResult);

			var eventResult:Object = store.results[0];
			
			if(eventResult.sparql::results && eventResult.sparql::results.sparql::result) {
				var result:Object = eventResult.sparql::results.sparql::result;
				if(result.sparql::binding.(@name=="title").children()[0]) {
					titleInput.text = result.sparql::binding.(@name=="title").children()[0];
				}
				if(result.sparql::binding.(@name=="givenname").children()[0]) {
					givenNameInput.text = result.sparql::binding.(@name=="givenname").children()[0];
				}
				if(result.sparql::binding.(@name=="family_name").children()[0]) {
					familyNameInput.text = result.sparql::binding.(@name=="family_name").children()[0];
				}
				if(result.sparql::binding.(@name=="nick").children()[0]) {
					nicknameInput.text = result.sparql::binding.(@name=="nick").children()[0];
				}
				if(result.sparql::binding.(@name=="homepage").children()[0]) {
					homepageInput.text = result.sparql::binding.(@name=="homepage").children()[0];
				}
				if(result.sparql::binding.(@name=="mbox").children()[0]) {
					emailInput.text = InputHelper.UriToEmail(result.sparql::binding.(@name=="mbox").children()[0]);
				}
				if(result.sparql::binding.(@name=="mbox_sha1sum").children()[0]) {
					emailEncInput.text = "[encrypted email in database]";
				}
				if(result.sparql::binding.(@name=="img").children()[0]) {
					imageInput.text = result.sparql::binding.(@name=="img").children()[0];
				}
			}
			
			reporter.status = "Data loaded.";
			reporter.clearStatusInSeconds(5);
		}
		
		private function apiSaveResult(event:Event):void
		{
			store.removeEventListener("result", apiSaveResult);
			
			reporter.status = "Data saved.";
			reporter.clearStatusInSeconds(5);
		}
		
		private function validateForm():Boolean {		
			var valid:Boolean = true;
			var vEvent:ValidationResultEvent;
			
			vEvent = emailInput_emailValidator.validate();
			if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID) {
				valid = false;
			}
			
			if(emailEncInput.text != "[encrypted email in database]") {
				vEvent = emailEncInput_emailValidator.validate(emailEncInput.text);
				if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID) {
					valid = false;
				}
			}
			
			return valid;
		}
	]]>
	</mx:Script>
	
	<mx:EmailValidator id="emailInput_emailValidator" required="false" source="{emailInput}" property="text"/>
	<mx:EmailValidator id="emailEncInput_emailValidator" required="false" listener="{emailEncInput}"/>

	<mx:FormHeading label="Basics"/>
	<mx:FormItem label="Title (Mr, Mrs, Ms, Dr, etc.)">
		<mx:TextInput id="titleInput" maxChars="100" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Given name">
		<mx:TextInput id="givenNameInput" maxChars="100" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Family name">
		<mx:TextInput id="familyNameInput" maxChars="100" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Nickname">
		<mx:TextInput id="nicknameInput" maxChars="100" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Homepage">
		<mx:TextInput id="homepageInput" maxChars="200" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Email">
		<mx:TextInput id="emailInput" maxChars="200" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Email encrypted">
		<mx:TextInput id="emailEncInput" maxChars="200" width="300"/>
	</mx:FormItem>
	<mx:FormItem label="Url to an image">
		<mx:TextInput id="imageInput" maxChars="200" width="300"/>
	</mx:FormItem>
	<mx:FormItem>
		<mx:HRule width="300"/>
		<mx:Button label="Save" click="if(validateForm()) save();"/>
	</mx:FormItem>
	
</mx:Form>
