<?xml version="1.0" encoding="utf-8"?>

<!--
Origo - social client

@copyright Copyright (c) 2008-2009 Mario Volke
@author    Mario Volke <mario.volke@webholics.de>
-->

<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	creationComplete="init()">

	<mx:Script>
		<![CDATA[
			import mx.events.ValidationResultEvent;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import com.origo.*;
			
			private var api:ApiConnector;
			private var store:ProfileStore;
			
			[Bindable] private var profiles:ArrayCollection = new ArrayCollection(); 
			
			private function init():void
			{				
				api = ApiConnector.getInstance();
				store = ProfileStore.getInstance();
				
				updateProfilesTable();
			}
			
			private function initAdd():void
			{
				addSameasValidator.addEventListener(ValidationResultEvent.INVALID, function():void {
					addSameas.styleName = "error";
				});
				addSameasValidator.addEventListener(ValidationResultEvent.VALID, function():void {
					addSameas.styleName = "";
				});
				addSeealsoValidator.addEventListener(ValidationResultEvent.INVALID, function():void {
					addSeealso.styleName = "error";
				});
				addSeealsoValidator.addEventListener(ValidationResultEvent.VALID, function():void {
					addSeealso.styleName = "";
				});
			}
			
			private function initUpdate():void
			{
				updateSeealsoValidator.addEventListener(ValidationResultEvent.INVALID, function():void {
					updateSeealso.styleName = "error";
				});
				updateSeealsoValidator.addEventListener(ValidationResultEvent.VALID, function():void {
					updateSeealso.styleName = "";
				});
			}
			
			private function enterAddState():void
			{
				addFormErrorText.visible = false;
				addFormErrorText.includeInLayout = false;
				
				// disable validator here because we want to set "invalid" empty fields as default
				// but won't show invalid styled text inputs
				addSameasValidator.enabled = false;
				addSeealsoValidator.enabled = false;
				
				addLabel.text = "";
				addSameas.text = "";
				addSeealso.text = "";
				
				addSameasValidator.enabled = true;
				addSeealsoValidator.enabled = true;
			}
			
			private function enterUpdateState():void
			{
				updateFormErrorText.visible = false;
				updateFormErrorText.includeInLayout = false;
				updateLabel.text = "";
				updateSameas.text = "";
				updateSeealso.text = "";
			}
			
			private function updateProfilesTable():void
			{
				profiles.removeAll();
				
				for each(var profile:Object in store.profiles.profile) {
					profiles.addItem({
						label: 		profile.@label,
						sameas: 	profile.@sameas,
						seealso: 	profile.@seealso
					});
				}
			}
			
			private function validateAddForm():Boolean
			{               
				var valid:Boolean = true;
				var vEvent:ValidationResultEvent;
                
				vEvent = addSameasValidator.validate();
				if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID)
					valid = false;
				
				vEvent = addSeealsoValidator.validate();
				if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID)
					valid = false;

				return valid;
			}
			
			private function addProfile():void
			{
				// trim all inputs
				addLabel.text = InputHelper.trim(addLabel.text);
				addSameas.text = InputHelper.trim(addSameas.text);
				addSeealso.text = InputHelper.trim(addSeealso.text);
				
				// validate
				if(!validateAddForm())
					return;
					
				currentState = "addsave";
					
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiAddError);
				api.editorProfilesUpdate(addSameas.text, addSeealso.text, addLabel.text);
			}
			
			private function addSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiAddError);
				
				// save external profiles into profile store
				var result:XML = event.data as XML;
				store.profiles = result;
				
				currentState = "";
				
				updateProfilesTable();
			}
			
			private function apiAddError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, addSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiAddError);
				
				currentState = "add";
				addFormErrorText.text = event.message;
				addFormErrorText.visible = true;
				addFormErrorText.includeInLayout = true;
			}
			
			private function gotoUpdateForm():void
			{
				var selected:Object = profilesGrid.selectedItem;
				
				if(selected == null) {
					var alert:Alert = Alert.show("Please select a profile you want to edit first.", "No profile selected");
					alert.width = 300;
					alert.height = 120;
					return;
				}
				
				currentState = "update";
				
				updateLabel.text = selected.label;
				updateSeealso.text = selected.seealso;
				updateSameas.text = selected.sameas;
			}
						
			private function validateUpdateForm():Boolean
			{               
				var valid:Boolean = true;
				var vEvent:ValidationResultEvent;
				
				vEvent = updateSeealsoValidator.validate();
				if(vEvent != null && vEvent.type == ValidationResultEvent.INVALID)
					valid = false;

				return valid;
			}
			
			private function updateProfile():void
			{
				// trim all inputs
				updateLabel.text = InputHelper.trim(updateLabel.text);
				updateSeealso.text = InputHelper.trim(updateSeealso.text);
				
				// validate
				if(!validateUpdateForm())
					return;
					
				currentState = "updatesave";
					
				api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, updateSuccess);
				api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiUpdateError);
				api.editorProfilesUpdate(updateSameas.text, updateSeealso.text, updateLabel.text);
			}
			
			private function updateSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, updateSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiUpdateError);
				
				// save external profiles into profile store
				var result:XML = event.data as XML;
				store.profiles = result;
				
				currentState = "";
				
				updateProfilesTable();
			}
			
			private function apiUpdateError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, updateSuccess);
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, apiUpdateError);
				
				currentState = "update";
				updateFormErrorText.text = event.message;
				updateFormErrorText.visible = true;
				updateFormErrorText.includeInLayout = true;
			}
			
			private function showDisabledInfo():void
			{
				var alert:Alert = Alert.show("You cannot change your personal profile URL.", "Can't change value");
				alert.width = 300;
				alert.height = 120;
			}
			
			private function deleteProfile():void
			{
				var selected:Object = profilesGrid.selectedItem;
				
				if(selected == null) {
					var alert:Alert = Alert.show("Please select a profile you want to delete first.", "No profile selected");
					alert.width = 300;
					alert.height = 120;
					return;
				}

				var alertDelete:Alert = Alert.show(
					"Are you sure you want to delete the selected profile?", 
					"Delete profile", 
					Alert.OK | Alert.CANCEL, 
					null, 
					alertDeleteListener, 
					null, 
					Alert.OK);
				alertDelete.width = 350;
				alertDelete.height = 120;
			}
			
			private function alertDeleteListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if(eventObj.detail == Alert.OK) {
					var selected:Object = profilesGrid.selectedItem;
					
					if(selected != null) {
						currentState = "delete";
					
						api.addEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
						api.addEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
						api.editorProfilesDelete(selected.sameas);
					}
				}
			}
			
			private function deleteSuccess(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
				
				// save external profiles into profile store
				var result:XML = event.data as XML;
				store.profiles = result;
				
				currentState = "";
				
				updateProfilesTable();
			}
			
			private function apiDeleteError(event:ApiConnectorEvent):void
			{
				api.removeEventListener(ApiConnectorEvent.SUCCESS_EVENT, deleteSuccess);
				api.removeEventListener(ApiConnectorEvent.ERROR_EVENT, apiDeleteError);
				
				currentState = "";
			}
			
			private function dataGridKeyDown(event:KeyboardEvent):void
			{
    			if(event.keyCode == Keyboard.DELETE)
    				deleteProfile();
			}
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="add" enterState="enterAddState()">
			<mx:AddChild>
				<mx:StringValidator id="addSameasValidator" source="{addSameas}" property="text" required="true"/>
			</mx:AddChild>
			<mx:AddChild>
				<mx:StringValidator id="addSeealsoValidator" source="{addSeealso}" property="text" required="true"/>
			</mx:AddChild>
			<mx:AddChild>
				<mx:Form id="addForm" 
					horizontalCenter="0" verticalCenter="0"
					defaultButton="{addSubmitButton}" 
					creationComplete="initAdd()">	
					<mx:FormHeading id="addFormHeading" label="Add external profile"/>
					<mx:Text id="addFormErrorText" styleName="errorText" visible="false" includeInLayout="false"/>
					<mx:FormItem label="Label">
						<mx:TextInput id="addLabel" width="200"/>
					</mx:FormItem>
					<mx:FormItem label="Personal URI" required="true">
						<mx:TextInput id="addSameas" width="200"/>
					</mx:FormItem>
					<mx:FormItem label="Profile FOAF document" required="true">
						<mx:TextInput id="addSeealso" width="200"/>
					</mx:FormItem>
					<mx:Spacer height="10" width="100%"/>
					<mx:HRule width="100%"/>
					<mx:HBox horizontalGap="10" horizontalAlign="right" width="100%">
						<mx:Button label="Cancel" id="addCancelButton" width="100" click="currentState=''"/>	
						<mx:Button label="Save" id="addSubmitButton" width="100" click="addProfile()"/>
					</mx:HBox>
				</mx:Form>	
			</mx:AddChild>
			<mx:RemoveChild target="{tableCanvas}"/>
		</mx:State>
		<mx:State name="addsave">
			<mx:AddChild>
				<mx:Box id="addProgressBar"
					paddingBottom="10" paddingTop="10" 
					paddingLeft="10" paddingRight="10"
					horizontalCenter="0" verticalCenter="0"
					styleName="box">
					<mx:ProgressBar 
						label="Adding external profile..." 
						width="300"
						indeterminate="true"/>
				</mx:Box>
			</mx:AddChild>
			<mx:RemoveChild target="{tableCanvas}"/>
		</mx:State>
		<mx:State name="update" enterState="enterUpdateState()">
			<mx:AddChild>
				<mx:StringValidator id="updateSeealsoValidator" source="{updateSeealso}" property="text" required="true"/>
			</mx:AddChild>
			<mx:AddChild>
				<mx:Form id="updateForm" 
					horizontalCenter="0" verticalCenter="0"
					defaultButton="{updateSubmitButton}"
					creationComplete="initUpdate()">	
					<mx:FormHeading id="updateFormHeading" label="Edit external profile"/>
					<mx:Text id="updateFormErrorText" styleName="errorText" visible="false" includeInLayout="false"/>
					<mx:FormItem label="Label">
						<mx:TextInput id="updateLabel" width="200"/>
					</mx:FormItem>
					<mx:FormItem label="Personal URI" required="true">
						<mx:TextInput id="updateSameas" width="200" editable="false" styleName="disabled" click="showDisabledInfo()" focusEnabled="false"/>
					</mx:FormItem>
					<mx:FormItem label="Profile FOAF document" required="true">
						<mx:TextInput id="updateSeealso" width="200"/>
					</mx:FormItem>
					<mx:Spacer height="10" width="100%"/>
					<mx:HRule width="100%"/>
					<mx:HBox horizontalGap="10" horizontalAlign="right" width="100%">
						<mx:Button label="Cancel" id="updateCancelButton" width="100" click="currentState=''"/>	
						<mx:Button label="Save" id="updateSubmitButton" width="100" click="updateProfile()"/>
					</mx:HBox>
				</mx:Form>	
			</mx:AddChild>
			<mx:RemoveChild target="{tableCanvas}"/>
		</mx:State>
		<mx:State name="updatesave">
			<mx:AddChild>
				<mx:Box id="updateProgressBar"
					paddingBottom="10" paddingTop="10" 
					paddingLeft="10" paddingRight="10"
					horizontalCenter="0" verticalCenter="0"
					styleName="box">
					<mx:ProgressBar 
						label="Updating external profile..." 
						width="300"
						indeterminate="true"/>
				</mx:Box>
			</mx:AddChild>
			<mx:RemoveChild target="{tableCanvas}"/>
		</mx:State>
		<mx:State name="delete">
			<mx:AddChild>
				<mx:Box id="deleteProgressBar"
					paddingBottom="10" paddingTop="10" 
					paddingLeft="10" paddingRight="10"
					horizontalCenter="0" verticalCenter="0"
					styleName="box">
					<mx:ProgressBar 
						label="Deleting external profile..." 
						width="300"
						indeterminate="true"/>
				</mx:Box>
			</mx:AddChild>
			<mx:RemoveChild target="{tableCanvas}"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="add">
			<mx:Fade target="{addForm}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
		<mx:Transition fromState="*" toState="addsave">
			<mx:Fade target="{addProgressBar}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
		<mx:Transition fromState="*" toState="update">
			<mx:Fade target="{updateForm}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
		<mx:Transition fromState="*" toState="updatesave">
			<mx:Fade target="{updateProgressBar}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
		<mx:Transition fromState="*" toState="">
			<mx:Fade target="{tableCanvas}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
		<mx:Transition fromState="*" toState="delete">
			<mx:Fade target="{deleteProgressBar}" duration="500" alphaFrom="0" alphaTo="1"/>
		</mx:Transition>
	</mx:transitions>

	<mx:Canvas id="tableCanvas" left="0" right="0" top="0" bottom="0">
		<mx:DataGrid id="profilesGrid" 
			left="0" right="0" 
			top="0" bottom="40" 
			editable="false" 
			dataProvider="{profiles}"
			keyDown="dataGridKeyDown(event)"
			doubleClick="gotoUpdateForm()"
			doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn headerText="Label" dataField="label"/>
				<mx:DataGridColumn headerText="Personal Profile URL" dataField="sameas"/>
				<mx:DataGridColumn headerText="Profile FOAF document" dataField="seealso"/>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:Label text="{(profiles.length != 1) ? profiles.length + ' external profiles' : profiles.length + ' external profile'}" 
			left="0" bottom="0" 
			styleName="normalText"/>
		
		<mx:HBox right="0" bottom="0">
			<mx:Button label="Delete selected" click="deleteProfile()"/>
			<mx:Button label="Edit selected" click="gotoUpdateForm()"/>
			<mx:Button label="Add profile" click="currentState='add'"/>
		</mx:HBox>
	</mx:Canvas>
	
</mx:Canvas>
